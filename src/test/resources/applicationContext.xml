<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx  
        http://www.springframework.org/schema/tx/spring-tx.xsd 
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">


    <!-- 启动扫描 -->
    <context:component-scan base-package="me.slamke.spring">
        <!-- <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" /> -->
    </context:component-scan>




    <!-- 启用CGliB -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>


    <bean id="chooseDataSourceAspect" class="me.slamke.spring.aop.ChooseDataSourceAspect"
          factory-method="aspectOf" />

    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath*:jdbc.properties</value>
            </list>
        </property>
    </bean>

    <!-- 两个数据源的功用配置，方便下面直接引用 -->
    <bean id="abstractXADataSource" class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init"
          destroy-method="close" abstract="true">
        <property name="xaDataSourceClassName" value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource"/>
        <property name="poolSize" value="10"/>
        <property name="minPoolSize" value="10"/>
        <property name="maxPoolSize" value="30"/>
        <property name="borrowConnectionTimeout" value="60"/>
        <property name="reapTimeout" value="20"/>
        <!-- 最大空闲时间 -->
        <property name="maxIdleTime" value="60"/>
        <property name="maintenanceInterval" value="60"/>
        <property name="loginTimeout" value="60"/>
        <property name="logWriter" value="60"/>
        <property name="testQuery">
            <value>select 1</value>
        </property>

    </bean>

    <!-- 配置第一个数据源 -->
    <bean id="dataSource_master" parent="abstractXADataSource">
        <!-- value只要两个数据源不同就行，随便取名 -->
        <property name="uniqueResourceName" value="mysql/sitestone"/>
        <property name="xaDataSourceClassName"
                  value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource"/>
        <property name="xaProperties">
            <props>
                <prop key="URL">${jdbc.url.master}</prop>
                <prop key="user">${jdbc.username}</prop>
                <prop key="password">${jdbc.password}</prop>
            </props>
        </property>
    </bean>

    <!-- 配置第二个数据源-->
    <bean id="dataSource_slave1" parent="abstractXADataSource">
        <!-- value只要两个数据源不同就行，随便取名 -->
        <property name="uniqueResourceName" value="mysql/sitesttwo"/>
        <property name="xaDataSourceClassName"
                  value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource"/>
        <property name="xaProperties">
            <props>
                <prop key="URL">${jdbc_slave1.url}</prop>
                <prop key="user">${jdbc_slave1.username}</prop>
                <prop key="password">${jdbc_slave1.password}</prop>
            </props>
        </property>
    </bean>

    <!-- 配置第二个数据源-->
    <bean id="dataSource_slave2" parent="abstractXADataSource">
        <!-- value只要两个数据源不同就行，随便取名 -->
        <property name="uniqueResourceName" value="mysql/sitestthree"/>
        <property name="xaDataSourceClassName"
                  value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource"/>
        <property name="xaProperties">
            <props>
                <prop key="URL">${jdbc_slave2.url}</prop>
                <prop key="user">${jdbc_slave2.username}</prop>
                <prop key="password">${jdbc_slave2.password}</prop>
            </props>
        </property>
    </bean>


    <bean name="dynamicDatasource" class="me.slamke.spring.datasource.CustomerDatasource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry key="master" value-ref="dataSource_master"/>
                <entry key="slave1" value-ref="dataSource_slave1"/>
                <entry key="slave2" value-ref="dataSource_slave2"/>
            </map>
        </property>
        <!-- 默认目标数据源为你主库数据源 -->
        <property name="defaultTargetDataSource" ref="dataSource_master"/>
    </bean>




    <!-- 为业务逻辑层的方法解析@DataSource注解  为当前线程的routeholder注入数据源key -->

    <bean id="sqlSessionFactorya" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dynamicDatasource"/>
        <property name="typeAliasesPackage" value="me.slamke.spring.dschange.bean"/>
        <!-- mapper和resultmap配置路径 -->
        <property name="mapperLocations">
            <list>
                <!-- 表示在me.slamke目录下的任意包下的resultmap包目录中，以-resultmap.xml或-mapper.xml结尾所有文件 -->
                <value>classpath:me/slamke/spring/dschange/mapper/ShopMapper.xml</value>
            </list>
        </property>
    </bean>
    <bean id="sqlSessionFactoryb" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dynamicDatasource"/>
        <property name="typeAliasesPackage" value="me.slamke.spring.dschange.bean"/>
        <!-- mapper和resultmap配置路径 -->
        <property name="mapperLocations">
            <list>
                <!-- 表示在me.slamke目录下的任意包下的resultmap包目录中，以-resultmap.xml或-mapper.xml结尾所有文件 -->
                <value>classpath:me/slamke/spring/dschange/mapper/ShopMapper.xml</value>
            </list>
        </property>
    </bean>

    <!-- 配置自定义的SqlSessionTemplate模板，注入相关配置 -->
    <bean id="sqlSessionTemplate" class="me.slamke.spring.mybatis.CustomSqlSessionTemplate" scope="prototype">
        <constructor-arg ref="sqlSessionFactorya"/>
        <!--<property name="targetSqlSessionFactorys">
            <map>     
                <entry value-ref="sqlSessionFactorya" key="master"/>
                <entry value-ref="sqlSessionFactoryb" key="slave"/>
            </map> 
        </property>-->
    </bean>

    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="me.slamke.spring.dschange.mapper"/>
        <property name="sqlSessionTemplateBeanName" value="sqlSessionTemplate"/>
        <property name="markerInterface" value="me.slamke.spring.dschange.mapper.SqlMapper"/>
    </bean>

    <!-- jta -->
    <bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager"
          init-method="init" destroy-method="close">
        <property name="forceShutdown">
            <value>true</value>
        </property>
    </bean>

    <bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp">
        <property name="transactionTimeout" value="300"/>
    </bean>

    <bean id="dataSourcekey" class="me.slamke.spring.datasource.DataSourceKey">
        <property name="writeKey" value="master"/>
        <property name="readKeys">
            <list>
                <value>slave1</value>
                <value>slave2</value>
            </list>
        </property>
    </bean>

    <bean id="springTransactionManager"
          class="org.springframework.transaction.jta.JtaTransactionManager">
        <property name="transactionManager">
            <ref bean="atomikosTransactionManager"/>
        </property>
        <property name="userTransaction">
            <ref bean="atomikosUserTransaction"/>
        </property>
    </bean>
    <tx:annotation-driven transaction-manager="springTransactionManager" proxy-target-class="true"/>
</beans>